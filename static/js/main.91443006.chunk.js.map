{"version":3,"sources":["App.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDifficultyChange","e","persist","setState","numMovesLimit","parseInt","target","value","handleStartGame","preventDefault","numTransitions","currShells","state","history","length","winningIndex","Math","floor","random","newShells","map","shell","shellIndex","newShell","assign","hasBall","shellChoice","numMovesLimitLocked","handleTransitionEnd","shuffleShells","isFinished","_this$state","newShellPositions","numMovesDone","finalShuffle","generateNewPositions","concat","x","y","boardWidth","boardHeight","some","isStarted","shellSize","generateNewPosition","position","isShellOverlap","acc","newPos","_ref","overlapX","overlapY","reduce","cur","push","shells","avalablePositions","_ref2","randomIndex","splice","_this2","_this$state2","ballClassNames","isBallVisible","Ball","react_default","a","createElement","className","join","onAnimationEnd","shellElements","index","key","onClick","onTransitionEnd","style","transform","disabled","width","onSubmit","type","name","onChange","checked","height","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.91443006.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        [\n          { x: 150, y: 100, hasBall: false },\n          { x: 300, y: 100, hasBall: false },\n          { x: 450, y: 100, hasBall: false },\n        ]\n      ],\n      numMovesLimitLocked: 3,\n      numMovesLimit: 3,\n      shellChoice: null,\n    };\n\n    this.boardWidth = 700;\n    this.boardHeight = 500;\n    this.numTransitions = 0;\n  }\n\n  numMovesDone() {\n    return this.state.history.length - 1;\n  }\n\n  // Step 1\n  isStarted() {\n    return this.state.history[0].some(shell => shell.hasBall);\n  }\n\n  // Step 1.1\n  isBallVisible() {\n    return this.state.history.length === 1 && this.isStarted();\n  }\n\n  // Step 2\n  isShuffling() {\n    return this.state.history.length > 1 && this.numMovesDone() < this.state.numMovesLimitLocked;\n  }\n\n  // Step 3\n  isFinished() {\n    return this.numMovesDone() === this.state.numMovesLimitLocked;\n  }\n\n  handleDifficultyChange = e => {\n    e.persist();\n    this.setState({\n      numMovesLimit: parseInt(e.target.value, 10)\n    });\n  }\n\n  handleStartGame = e => {\n    e.preventDefault();\n\n    this.numTransitions = 0;\n\n    const currShells = this.state.history[this.state.history.length - 1];\n    const winningIndex = Math.floor(Math.random() * currShells.length);\n    const newShells = currShells.map((shell, shellIndex) => {\n      const newShell = Object.assign({}, shell);\n      newShell.hasBall = shellIndex === winningIndex;\n      return newShell;\n    });\n\n    this.setState({\n      history: [newShells],\n      shellChoice: null,\n      numMovesLimitLocked: this.state.numMovesLimit\n    });\n  }\n\n  handleTransitionEnd = () => {\n    this.numTransitions++;\n    if (this.numTransitions % 3 === 0) {\n      this.shuffleShells();\n    }\n  }\n\n  generateNewPositions() {\n    const shellSize = 100;\n    const { boardWidth, boardHeight } = this;\n\n    function generateNewPosition(position) {\n      position.x = Math.floor(Math.random() * (boardWidth - shellSize));\n      position.y = Math.floor(Math.random() * (boardHeight - shellSize));\n      return position;\n    }\n\n    function isShellOverlap(acc, newPos) {\n      return acc.some(({ x, y }) => {\n        const overlapX = (newPos.x >= x - shellSize) && (newPos.x <= x + shellSize);\n        const overlapY = (newPos.y >= y - shellSize) && (newPos.y <= y + shellSize);\n        return overlapX && overlapY;\n      });\n    }\n\n    const newPositions = this.state.history[this.state.history.length - 1]\n      .reduce((acc, cur) => {\n        const shell = Object.assign({}, cur);\n        let newPos = generateNewPosition(shell);\n\n        while(isShellOverlap(acc, newPos)) {\n          newPos = generateNewPosition(shell);\n        }\n\n        acc.push(newPos);\n        return acc;\n      }, []);\n\n    return newPositions;\n  }\n\n  shuffleShells = () => {\n    if (this.isFinished()) {\n      return;\n    }\n\n    const { history, numMovesLimit } = this.state;\n    const isFinalMove = this.numMovesDone() === numMovesLimit - 1;\n\n    const newShellPositions = isFinalMove\n      ? this.finalShuffle(history[0])\n      : this.generateNewPositions();\n\n    this.setState({\n      history: history.concat([newShellPositions]),\n    });\n  }\n\n  finalShuffle(shells) {\n    const avalablePositions = shells.map(({ x }) => x);\n\n    const shuffledShells = shells.map(shell => {\n      const randomIndex = Math.floor(Math.random() * avalablePositions.length);\n      shell.x = avalablePositions[randomIndex];\n      avalablePositions.splice(randomIndex, 1);\n      return shell;\n    });\n\n    return shuffledShells;\n  }\n\n  render() {\n    const {\n      history,\n      numMovesLimit,\n      numMovesLimitLocked,\n      shellChoice,\n    } = this.state;\n\n    const ballClassNames = ['ball'];\n\n    if (this.isBallVisible()) {\n      ballClassNames.push('ball--start');\n    }\n\n    if (shellChoice && shellChoice.hasBall) {\n      ballClassNames.push('ball--win');\n    }\n\n    const Ball = () => <div\n      className={ballClassNames.join(' ')}\n      onAnimationEnd={this.shuffleShells}>\n    </div>\n\n    const shellElements = history[history.length - 1]\n      .map((shell, index) =>\n        <button\n          key={index}\n          className=\"shell\"\n          onClick={() => this.setState({ shellChoice: shell })}\n          onTransitionEnd={this.handleTransitionEnd}\n          style={{transform: `translate(${shell.x}px, ${shell.y}px)`}}\n          disabled={!this.isFinished()}>\n          { shell.hasBall && <Ball/> }\n        </button>\n      );\n\n    return (\n      <div className=\"App\" style={{ width: this.boardWidth }}>\n        <h1>Game of Shells</h1>\n\n        <form className=\"form\" onSubmit={this.handleStartGame}>\n          <div>\n            <button\n              type=\"submit\"\n              className=\"form__btn\"\n              disabled={this.isStarted() && this.numMovesDone() < numMovesLimitLocked}>\n              START\n            </button>\n          </div>\n\n          <div className=\"form__options\">\n            <label className=\"form__label\">\n              <input\n                type=\"radio\"\n                name=\"difficulty\"\n                value=\"3\"\n                onChange={this.handleDifficultyChange}\n                checked={numMovesLimit === 3}\n                disabled={this.isStarted() && !this.isFinished()}/>\n                Beginner\n            </label>\n\n            <label className=\"form__label\">\n              <input\n                type=\"radio\"\n                name=\"difficulty\"\n                value=\"5\"\n                onChange={this.handleDifficultyChange}\n                checked={numMovesLimit === 5}\n                disabled={this.isStarted() && !this.isFinished()}/>\n                Intermediate\n            </label>\n\n            <label className=\"form__label\">\n              <input\n                type=\"radio\"\n                name=\"difficulty\"\n                value=\"10\"\n                onChange={this.handleDifficultyChange}\n                checked={numMovesLimit === 10}\n                disabled={this.isStarted() && !this.isFinished()}/>\n                Expert\n            </label>\n          </div>\n        </form>\n\n        <div className=\"board\" style={{ height: this.boardHeight }}>\n          <div className=\"board__result\">\n            { shellChoice && (shellChoice.hasBall ? 'FOUND IT!' : 'TRY ANOTHER') }\n          </div>\n          {shellElements}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}