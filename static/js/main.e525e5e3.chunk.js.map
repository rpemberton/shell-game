{"version":3,"sources":["App.js","index.js"],"names":["App","_useState","useState","x","y","hasBall","_useState2","Object","slicedToArray","history","setHistory","_useState3","_useState4","numMovesLimitLocked","setNumMovesLimitLocked","_useState5","_useState6","numMovesLimit","setNumMovesLimit","_useState7","_useState8","shellChoice","setShellChoice","boardWidth","boardHeight","numTransitions","numMovesDone","length","isStarted","some","shell","isFinished","handleDifficultyChange","e","Number","target","value","handleTransitionEnd","shuffleShells","newShellPositions","shells","avalablePositions","map","_ref2","randomIndex","Math","floor","random","splice","finalShuffle","shellSize","generateNewPosition","position","isShellOverlap","acc","newPos","_ref","overlapX","overlapY","reduce","cur","assign","push","generateNewPositions","concat","getBallClassNames","ballClassNames","join","Ball","react_default","a","createElement","className","onAnimationEnd","shellElements","index","role","key","onClick","onTransitionEnd","style","transform","disabled","width","onSubmit","preventDefault","currShells","winningIndex","newShells","shellIndex","newShell","type","name","onChange","checked","height","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e525e5e3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [history, setHistory] = useState([\n    [\n      { x: 150, y: 100, hasBall: false },\n      { x: 300, y: 100, hasBall: false },\n      { x: 450, y: 100, hasBall: false },\n    ]\n  ]);\n  const [numMovesLimitLocked, setNumMovesLimitLocked] = useState(3);\n  const [numMovesLimit, setNumMovesLimit] = useState(3);\n  const [shellChoice, setShellChoice] = useState(null);\n  const boardWidth = 700;\n  const boardHeight = 500;\n  let numTransitions = 0;\n\n  function numMovesDone() {\n    return history.length - 1;\n  }\n\n  function isStarted() {\n    return history[0].some(shell => shell.hasBall);\n  }\n\n  function isBallVisible() {\n    return history.length === 1 && isStarted();\n  }\n\n  function isFinished() {\n    return numMovesDone() === numMovesLimitLocked;\n  }\n\n  function handleDifficultyChange(e) {\n    setNumMovesLimit(Number(e.target.value));\n  }\n\n  function handleStartGame(e) {\n    e.preventDefault();\n\n    numTransitions = 0;\n\n    const currShells = history[history.length - 1];\n    const winningIndex = Math.floor(Math.random() * currShells.length);\n    const newShells = currShells.map((shell, shellIndex) => {\n      const newShell = Object.assign({}, shell);\n      newShell.hasBall = shellIndex === winningIndex;\n      return newShell;\n    });\n\n    setHistory([newShells]);\n    setShellChoice(null);\n    setNumMovesLimitLocked(numMovesLimit);\n  }\n\n  function handleTransitionEnd() {\n    numTransitions++;\n    if (numTransitions % 3 === 0) {\n      shuffleShells();\n    }\n  }\n\n  function generateNewPositions() {\n    const shellSize = 100;\n\n    function generateNewPosition(position) {\n      position.x = Math.floor(Math.random() * (boardWidth - shellSize));\n      position.y = Math.floor(Math.random() * (boardHeight - shellSize));\n      return position;\n    }\n\n    function isShellOverlap(acc, newPos) {\n      return acc.some(({ x, y }) => {\n        const overlapX = (newPos.x >= x - shellSize) && (newPos.x <= x + shellSize);\n        const overlapY = (newPos.y >= y - shellSize) && (newPos.y <= y + shellSize);\n        return overlapX && overlapY;\n      });\n    }\n\n    const newPositions = history[history.length - 1]\n      .reduce((acc, cur) => {\n        const shell = Object.assign({}, cur);\n        let newPos = generateNewPosition(shell);\n\n        while(isShellOverlap(acc, newPos)) {\n          newPos = generateNewPosition(shell);\n        }\n\n        acc.push(newPos);\n        return acc;\n      }, []);\n\n    return newPositions;\n  }\n\n  function shuffleShells() {\n    if (isFinished()) {\n      return;\n    }\n\n    const isFinalMove = numMovesDone() === numMovesLimitLocked - 1;\n\n    const newShellPositions = isFinalMove\n      ? finalShuffle(history[0])\n      : generateNewPositions();\n\n    setHistory(history.concat([newShellPositions]));\n  }\n\n  function finalShuffle(shells) {\n    const avalablePositions = shells.map(({ x }) => x);\n\n    const shuffledShells = shells.map(shell => {\n      const randomIndex = Math.floor(Math.random() * avalablePositions.length);\n      shell.x = avalablePositions[randomIndex];\n      avalablePositions.splice(randomIndex, 1);\n      return shell;\n    });\n\n    return shuffledShells;\n  }\n\n  function getBallClassNames() {\n    const ballClassNames = ['ball'];\n\n    if (isBallVisible()) {\n      ballClassNames.push('ball--start');\n    }\n\n    if (shellChoice && shellChoice.hasBall) {\n      ballClassNames.push('ball--win');\n    }\n\n    return ballClassNames.join(' ');\n  }\n\n  function Ball() {\n    return <div\n      className={getBallClassNames()}\n      onAnimationEnd={shuffleShells}>\n    </div>\n  }\n\n  const shellElements = history[history.length - 1]\n    .map((shell, index) =>\n      <div\n        role=\"button\"\n        key={index}\n        className=\"shell\"\n        onClick={() => setShellChoice(shell)}\n        onTransitionEnd={handleTransitionEnd}\n        style={{transform: `translate(${shell.x}px, ${shell.y}px)`}}\n        disabled={!isFinished()}>\n        { shell.hasBall && <Ball/> }\n      </div>\n    );\n\n  return (\n    <div className=\"App\" style={{ width: boardWidth }}>\n      <h1>Shell game</h1>\n\n      <form className=\"form\" onSubmit={handleStartGame}>\n        <div>\n          <button\n            type=\"submit\"\n            className=\"form__btn\"\n            disabled={isStarted() && numMovesDone() < numMovesLimitLocked}>\n            START\n          </button>\n        </div>\n\n        <div className=\"form__options\">\n          <label className=\"form__label\">\n            <input\n              type=\"radio\"\n              name=\"difficulty\"\n              value=\"3\"\n              onChange={handleDifficultyChange}\n              checked={numMovesLimit === 3}\n              disabled={isStarted() && !isFinished()}/>\n              Beginner\n          </label>\n\n          <label className=\"form__label\">\n            <input\n              type=\"radio\"\n              name=\"difficulty\"\n              value=\"5\"\n              onChange={handleDifficultyChange}\n              checked={numMovesLimit === 5}\n              disabled={isStarted() && !isFinished()}/>\n              Intermediate\n          </label>\n\n          <label className=\"form__label\">\n            <input\n              type=\"radio\"\n              name=\"difficulty\"\n              value=\"10\"\n              onChange={handleDifficultyChange}\n              checked={numMovesLimit === 10}\n              disabled={isStarted() && !isFinished()}/>\n              Expert\n          </label>\n        </div>\n      </form>\n\n      <div className=\"board\" style={{ height: boardHeight }}>\n        <div className=\"board__result\">\n          { shellChoice && (shellChoice.hasBall ? 'FOUND IT!' : 'TRY ANOTHER') }\n        </div>\n        {shellElements}\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}